---

- name: Read in the service site config variables
  include_vars:
    file: site_configs/{{ inventory_hostname }}/{{ service.name }}/config.yml

- name: Create CaaS Directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
  with_items:
    - "{{ service_containers_dir }}/{{ service.name }}/"
    - "{{ service_containers_dir }}/{{ service.name }}/certs"
    - "{{ service_containers_dir }}/{{ service.name }}/haproxy"
    - "{{ service_containers_dir }}/{{ service.name }}/scripts"
    - "{{ service_containers_dir }}/{{ service.name }}/letsencrypt"
    - "{{ service_containers_dir }}/{{ service.name }}/nginx"
    - "{{ service_containers_dir }}/{{ service.name }}/nginx-templates"
    - "{{ service_containers_dir }}/{{ service.name }}/webroot"

- name: Copy CaaS script files
  ansible.builtin.copy:
    src: "files/{{ file_template_file }}"
    dest: "{{ service_containers_dir }}/{{ service.name }}/scripts/{{ file_template_file }}"
    owner: root
    group: root
    mode: 0755
  loop:
  - create-cert.sh
  - seed-cert.sh
  loop_control:
    loop_var: file_template_file

- name: Copy nginx template
  ansible.builtin.copy:
    src: "files/default.conf.template"
    dest: "{{ service_containers_dir }}/{{ service.name }}/nginx-templates/default.conf.template"
    owner: root
    group: root
    mode: 0644

- name: Template CaaS deployment files
  ansible.builtin.template:
    src: "{{ script_template_file }}.j2"
    dest: "{{ service_containers_dir }}/{{ service.name }}/scripts/{{ script_template_file }}"
    owner: root
    group: root
    mode: 0755
  loop:
  - servicectl.sh
  - renew-cert.sh
  loop_control:
    loop_var: script_template_file

- name: "Template CaaS deployment files - {{ service.name }}.service"
  ansible.builtin.template:
    src: service.j2
    dest: "/etc/systemd/system/{{ service.name }}.service"
    owner: root
    group: root
    mode: 0755

- name: Check to see if the certificate exists in the expected location
  ansible.builtin.stat:
    path: "{{ service_containers_dir }}/{{ service.name }}/letsencrypt/live/{{ cert.name }}/cert.pem"
  register: cert_exists
  loop: "{{ certbot.certificates }}"
  loop_control:
    loop_var: cert

#- name: d
#  debug:
#    msg: "{{ cert_exists }}"

- name: Add the certificate to the bootstrap_certbot variable if it does not exist
  set_fact:
    bootstrap_certbot: "{{ bootstrap_certbot | default([]) + [cert.cert.name] }}"
  loop: "{{ cert_exists.results }}"
  loop_control:
    loop_var: cert
  when: cert.stat.exists == False

- name: "Template HAProxy config"
  ansible.builtin.template:
    src: "{{ script_template_file }}.j2"
    dest: "{{ service_containers_dir }}/{{ service.name }}/haproxy/{{ script_template_file }}"
    owner: root
    group: root
    mode: 0644
  loop:
  - haproxy.cfg
  - crt-list.cfg
  loop_control:
    loop_var: script_template_file

- name: Create the default SSL certificate
  ansible.builtin.command: "{{ service_containers_dir }}/{{ service.name }}/scripts/seed-cert.sh"
  args:
    chdir: "{{ service_containers_dir }}/{{ service.name }}/certs/"
    creates: "{{ service_containers_dir }}/{{ service.name }}/certs/default.pem"

#- name: Seed the Let's Encrypt certificates
#  include_tasks: tasks/seed_letsencrypt.yml
#  loop: "{{ cerbot.certificates }}"
#  loop_control:
#    loop_var: cert

# - Loop through the certbot.certificates and:
#   - Check to see if the live certificate exists
#   - If it does NOT exist, add the certificate entry into a bootstrap_certbot variable
# - Template the crt-list.cfg file skipping the entries in the bootstrap_certbot variable
# - Start the service
# - Wait for the service to start (wait for 404 response at .well-known)
# - Run the create-cert.sh script for each certificate in the bootstrap_certbot variable
# - Check to see if the certificates were created, if not then repeat the last step - if they were created then add it to a created_certbot variable
# - Template the crt-list.cfg file again, difference()'ing the two variables
# - Restart the service

#- name: d
#  debug:
#    msg: "{{ bootstrap_certbot }}"
#
#- name: f
#  fail:
#    msg: fail